# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from laser_mapper/LoopClosureRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class LoopClosureRequest(genpy.Message):
  _md5sum = "63745a70c33f565b244229b7533d43d5"
  _type = "laser_mapper/LoopClosureRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
int64 time_a
int64 time_b
geometry_msgs/Transform transform_a_b
int64[] collector_times

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['time_a','time_b','transform_a_b','collector_times']
  _slot_types = ['int64','int64','geometry_msgs/Transform','int64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       time_a,time_b,transform_a_b,collector_times

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LoopClosureRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.time_a is None:
        self.time_a = 0
      if self.time_b is None:
        self.time_b = 0
      if self.transform_a_b is None:
        self.transform_a_b = geometry_msgs.msg.Transform()
      if self.collector_times is None:
        self.collector_times = []
    else:
      self.time_a = 0
      self.time_b = 0
      self.transform_a_b = geometry_msgs.msg.Transform()
      self.collector_times = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2q7d().pack(_x.time_a, _x.time_b, _x.transform_a_b.translation.x, _x.transform_a_b.translation.y, _x.transform_a_b.translation.z, _x.transform_a_b.rotation.x, _x.transform_a_b.rotation.y, _x.transform_a_b.rotation.z, _x.transform_a_b.rotation.w))
      length = len(self.collector_times)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(struct.pack(pattern, *self.collector_times))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.transform_a_b is None:
        self.transform_a_b = geometry_msgs.msg.Transform()
      end = 0
      _x = self
      start = end
      end += 72
      (_x.time_a, _x.time_b, _x.transform_a_b.translation.x, _x.transform_a_b.translation.y, _x.transform_a_b.translation.z, _x.transform_a_b.rotation.x, _x.transform_a_b.rotation.y, _x.transform_a_b.rotation.z, _x.transform_a_b.rotation.w,) = _get_struct_2q7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      end += struct.calcsize(pattern)
      self.collector_times = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2q7d().pack(_x.time_a, _x.time_b, _x.transform_a_b.translation.x, _x.transform_a_b.translation.y, _x.transform_a_b.translation.z, _x.transform_a_b.rotation.x, _x.transform_a_b.rotation.y, _x.transform_a_b.rotation.z, _x.transform_a_b.rotation.w))
      length = len(self.collector_times)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(self.collector_times.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.transform_a_b is None:
        self.transform_a_b = geometry_msgs.msg.Transform()
      end = 0
      _x = self
      start = end
      end += 72
      (_x.time_a, _x.time_b, _x.transform_a_b.translation.x, _x.transform_a_b.translation.y, _x.transform_a_b.translation.z, _x.transform_a_b.rotation.x, _x.transform_a_b.rotation.y, _x.transform_a_b.rotation.z, _x.transform_a_b.rotation.w,) = _get_struct_2q7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      end += struct.calcsize(pattern)
      self.collector_times = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2q7d = None
def _get_struct_2q7d():
    global _struct_2q7d
    if _struct_2q7d is None:
        _struct_2q7d = struct.Struct("<2q7d")
    return _struct_2q7d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from laser_mapper/LoopClosureResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class LoopClosureResponse(genpy.Message):
  _md5sum = "4139599d8ee1206e76a44f8815452ccc"
  _type = "laser_mapper/LoopClosureResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
geometry_msgs/Transform[] transforms


================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['transforms']
  _slot_types = ['geometry_msgs/Transform[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       transforms

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LoopClosureResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.transforms is None:
        self.transforms = []
    else:
      self.transforms = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.transforms:
        _v1 = val1.translation
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.rotation
        _x = _v2
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.transforms is None:
        self.transforms = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v3 = val1.translation
        _x = _v3
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v4 = val1.rotation
        _x = _v4
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.transforms.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.transforms:
        _v5 = val1.translation
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = val1.rotation
        _x = _v6
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.transforms is None:
        self.transforms = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v7 = val1.translation
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v8 = val1.rotation
        _x = _v8
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.transforms.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
class LoopClosure(object):
  _type          = 'laser_mapper/LoopClosure'
  _md5sum = '2bfd8abab66078a46d6c266f42293b3d'
  _request_class  = LoopClosureRequest
  _response_class = LoopClosureResponse
