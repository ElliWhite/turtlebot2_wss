// Generated by gencpp from file nifti_teleop/ScanningFeedback.msg
// DO NOT EDIT!


#ifndef NIFTI_TELEOP_MESSAGE_SCANNINGFEEDBACK_H
#define NIFTI_TELEOP_MESSAGE_SCANNINGFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nifti_teleop
{
template <class ContainerAllocator>
struct ScanningFeedback_
{
  typedef ScanningFeedback_<ContainerAllocator> Type;

  ScanningFeedback_()
    : status(0)  {
    }
  ScanningFeedback_(const ContainerAllocator& _alloc)
    : status(0)  {
  (void)_alloc;
    }



   typedef int8_t _status_type;
  _status_type status;



  enum {
    ERROR = 2,
    WAITING_FOR_FIRST_SWIPE = 3,
    WAITING_FOR_COMPLETE_SWIPE = 4,
    READY = 0,
  };


  typedef boost::shared_ptr< ::nifti_teleop::ScanningFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nifti_teleop::ScanningFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct ScanningFeedback_

typedef ::nifti_teleop::ScanningFeedback_<std::allocator<void> > ScanningFeedback;

typedef boost::shared_ptr< ::nifti_teleop::ScanningFeedback > ScanningFeedbackPtr;
typedef boost::shared_ptr< ::nifti_teleop::ScanningFeedback const> ScanningFeedbackConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nifti_teleop::ScanningFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nifti_teleop::ScanningFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace nifti_teleop

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nifti_teleop': ['/home/elliottwhite/turtlebot2_wss/turtlebot_navigation_ws/devel/share/nifti_teleop/msg'], 'actionlib': ['/opt/ros/kinetic/share/actionlib/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::nifti_teleop::ScanningFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nifti_teleop::ScanningFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nifti_teleop::ScanningFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nifti_teleop::ScanningFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nifti_teleop::ScanningFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nifti_teleop::ScanningFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nifti_teleop::ScanningFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a8c048d7f82b48973ae3db994d220aea";
  }

  static const char* value(const ::nifti_teleop::ScanningFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa8c048d7f82b4897ULL;
  static const uint64_t static_value2 = 0x3ae3db994d220aeaULL;
};

template<class ContainerAllocator>
struct DataType< ::nifti_teleop::ScanningFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nifti_teleop/ScanningFeedback";
  }

  static const char* value(const ::nifti_teleop::ScanningFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nifti_teleop::ScanningFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
byte ERROR=2\n\
byte WAITING_FOR_FIRST_SWIPE=3\n\
byte WAITING_FOR_COMPLETE_SWIPE=4\n\
byte READY=0\n\
byte status\n\
\n\
";
  }

  static const char* value(const ::nifti_teleop::ScanningFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nifti_teleop::ScanningFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ScanningFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nifti_teleop::ScanningFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nifti_teleop::ScanningFeedback_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIFTI_TELEOP_MESSAGE_SCANNINGFEEDBACK_H
