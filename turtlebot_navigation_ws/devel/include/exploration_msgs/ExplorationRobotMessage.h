// Generated by gencpp from file exploration_msgs/ExplorationRobotMessage.msg
// DO NOT EDIT!


#ifndef EXPLORATION_MSGS_MESSAGE_EXPLORATIONROBOTMESSAGE_H
#define EXPLORATION_MSGS_MESSAGE_EXPLORATIONROBOTMESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>
#include <nav_msgs/Path.h>

namespace exploration_msgs
{
template <class ContainerAllocator>
struct ExplorationRobotMessage_
{
  typedef ExplorationRobotMessage_<ContainerAllocator> Type;

  ExplorationRobotMessage_()
    : header()
    , robot_id(0)
    , action(0)
    , goal()
    , path()
    , path_cost(0.0)  {
    }
  ExplorationRobotMessage_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , robot_id(0)
    , action(0)
    , goal(_alloc)
    , path(_alloc)
    , path_cost(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _robot_id_type;
  _robot_id_type robot_id;

   typedef uint8_t _action_type;
  _action_type action;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _goal_type;
  _goal_type goal;

   typedef  ::nav_msgs::Path_<ContainerAllocator>  _path_type;
  _path_type path;

   typedef double _path_cost_type;
  _path_cost_type path_cost;



  enum {
    kReached = 0u,
    kPlanned = 1u,
    kSelected = 2u,
    kAborted = 3u,
  };


  typedef boost::shared_ptr< ::exploration_msgs::ExplorationRobotMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::exploration_msgs::ExplorationRobotMessage_<ContainerAllocator> const> ConstPtr;

}; // struct ExplorationRobotMessage_

typedef ::exploration_msgs::ExplorationRobotMessage_<std::allocator<void> > ExplorationRobotMessage;

typedef boost::shared_ptr< ::exploration_msgs::ExplorationRobotMessage > ExplorationRobotMessagePtr;
typedef boost::shared_ptr< ::exploration_msgs::ExplorationRobotMessage const> ExplorationRobotMessageConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::exploration_msgs::ExplorationRobotMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::exploration_msgs::ExplorationRobotMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace exploration_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'exploration_msgs': ['/home/elliottwhite/turtlebot2_wss/turtlebot_navigation_ws/src/tradr-msgs/exploration_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'visualization_msgs': ['/opt/ros/kinetic/share/visualization_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::exploration_msgs::ExplorationRobotMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::exploration_msgs::ExplorationRobotMessage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::exploration_msgs::ExplorationRobotMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::exploration_msgs::ExplorationRobotMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exploration_msgs::ExplorationRobotMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exploration_msgs::ExplorationRobotMessage_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::exploration_msgs::ExplorationRobotMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2a509b66d9d7a094b27f193e7e66af9a";
  }

  static const char* value(const ::exploration_msgs::ExplorationRobotMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2a509b66d9d7a094ULL;
  static const uint64_t static_value2 = 0xb27f193e7e66af9aULL;
};

template<class ContainerAllocator>
struct DataType< ::exploration_msgs::ExplorationRobotMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "exploration_msgs/ExplorationRobotMessage";
  }

  static const char* value(const ::exploration_msgs::ExplorationRobotMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::exploration_msgs::ExplorationRobotMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 kReached   = 0\n\
uint8 kPlanned   = 1  \n\
uint8 kSelected  = 2 \n\
uint8 kAborted   = 3\n\
\n\
std_msgs/Header header\n\
uint8 robot_id                   # robot id\n\
uint8 action			 # action\n\
geometry_msgs/Point goal         # the goal\n\
nav_msgs/Path path               # the computed path  \n\
float64 path_cost	         # cost of the planned path: \"< 0\" means invalid\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: nav_msgs/Path\n\
#An array of poses that represents a Path for a robot to follow\n\
Header header\n\
geometry_msgs/PoseStamped[] poses\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::exploration_msgs::ExplorationRobotMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::exploration_msgs::ExplorationRobotMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.robot_id);
      stream.next(m.action);
      stream.next(m.goal);
      stream.next(m.path);
      stream.next(m.path_cost);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExplorationRobotMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::exploration_msgs::ExplorationRobotMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::exploration_msgs::ExplorationRobotMessage_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "robot_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.robot_id);
    s << indent << "action: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.action);
    s << indent << "goal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
    s << indent << "path: ";
    s << std::endl;
    Printer< ::nav_msgs::Path_<ContainerAllocator> >::stream(s, indent + "  ", v.path);
    s << indent << "path_cost: ";
    Printer<double>::stream(s, indent + "  ", v.path_cost);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXPLORATION_MSGS_MESSAGE_EXPLORATIONROBOTMESSAGE_H
