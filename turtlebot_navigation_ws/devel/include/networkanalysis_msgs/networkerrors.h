// Generated by gencpp from file networkanalysis_msgs/networkerrors.msg
// DO NOT EDIT!


#ifndef NETWORKANALYSIS_MSGS_MESSAGE_NETWORKERRORS_H
#define NETWORKANALYSIS_MSGS_MESSAGE_NETWORKERRORS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace networkanalysis_msgs
{
template <class ContainerAllocator>
struct networkerrors_
{
  typedef networkerrors_<ContainerAllocator> Type;

  networkerrors_()
    : retransmits(0)
    , badsegments(0)
    , udperrors(0)
    , tx_retires(0)
    , rx_dropped(0)
    , nic_tx_errors(0)
    , nic_rx_errors(0)
    , nic_tx_dropped(0)
    , nic_rx_dropped(0)  {
    }
  networkerrors_(const ContainerAllocator& _alloc)
    : retransmits(0)
    , badsegments(0)
    , udperrors(0)
    , tx_retires(0)
    , rx_dropped(0)
    , nic_tx_errors(0)
    , nic_rx_errors(0)
    , nic_tx_dropped(0)
    , nic_rx_dropped(0)  {
  (void)_alloc;
    }



   typedef int64_t _retransmits_type;
  _retransmits_type retransmits;

   typedef int64_t _badsegments_type;
  _badsegments_type badsegments;

   typedef int64_t _udperrors_type;
  _udperrors_type udperrors;

   typedef int64_t _tx_retires_type;
  _tx_retires_type tx_retires;

   typedef int64_t _rx_dropped_type;
  _rx_dropped_type rx_dropped;

   typedef int64_t _nic_tx_errors_type;
  _nic_tx_errors_type nic_tx_errors;

   typedef int64_t _nic_rx_errors_type;
  _nic_rx_errors_type nic_rx_errors;

   typedef int64_t _nic_tx_dropped_type;
  _nic_tx_dropped_type nic_tx_dropped;

   typedef int64_t _nic_rx_dropped_type;
  _nic_rx_dropped_type nic_rx_dropped;





  typedef boost::shared_ptr< ::networkanalysis_msgs::networkerrors_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::networkanalysis_msgs::networkerrors_<ContainerAllocator> const> ConstPtr;

}; // struct networkerrors_

typedef ::networkanalysis_msgs::networkerrors_<std::allocator<void> > networkerrors;

typedef boost::shared_ptr< ::networkanalysis_msgs::networkerrors > networkerrorsPtr;
typedef boost::shared_ptr< ::networkanalysis_msgs::networkerrors const> networkerrorsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::networkanalysis_msgs::networkerrors_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::networkanalysis_msgs::networkerrors_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace networkanalysis_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'networkanalysis_msgs': ['/home/elliottwhite/turtlebot2_wss/turtlebot_navigation_ws/src/tradr-msgs/networkanalysis_msgs/msg', '/home/elliottwhite/turtlebot2_wss/turtlebot_navigation_ws/devel/share/networkanalysis_msgs/msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::networkanalysis_msgs::networkerrors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::networkanalysis_msgs::networkerrors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::networkanalysis_msgs::networkerrors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::networkanalysis_msgs::networkerrors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::networkanalysis_msgs::networkerrors_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::networkanalysis_msgs::networkerrors_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::networkanalysis_msgs::networkerrors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "00505f88cd05dc9219c740b79985fc84";
  }

  static const char* value(const ::networkanalysis_msgs::networkerrors_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x00505f88cd05dc92ULL;
  static const uint64_t static_value2 = 0x19c740b79985fc84ULL;
};

template<class ContainerAllocator>
struct DataType< ::networkanalysis_msgs::networkerrors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "networkanalysis_msgs/networkerrors";
  }

  static const char* value(const ::networkanalysis_msgs::networkerrors_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::networkanalysis_msgs::networkerrors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#segment errors at (tcp) protocol level\n\
int64 retransmits\n\
int64 badsegments\n\
\n\
#errors in udp transmission\n\
int64 udperrors\n\
\n\
#system level (MAC layer) errors\n\
int64 tx_retires\n\
int64 rx_dropped\n\
\n\
\n\
#interface level (NIC statistics) errors\n\
int64 nic_tx_errors\n\
int64 nic_rx_errors\n\
int64 nic_tx_dropped\n\
int64 nic_rx_dropped\n\
";
  }

  static const char* value(const ::networkanalysis_msgs::networkerrors_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::networkanalysis_msgs::networkerrors_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.retransmits);
      stream.next(m.badsegments);
      stream.next(m.udperrors);
      stream.next(m.tx_retires);
      stream.next(m.rx_dropped);
      stream.next(m.nic_tx_errors);
      stream.next(m.nic_rx_errors);
      stream.next(m.nic_tx_dropped);
      stream.next(m.nic_rx_dropped);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct networkerrors_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::networkanalysis_msgs::networkerrors_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::networkanalysis_msgs::networkerrors_<ContainerAllocator>& v)
  {
    s << indent << "retransmits: ";
    Printer<int64_t>::stream(s, indent + "  ", v.retransmits);
    s << indent << "badsegments: ";
    Printer<int64_t>::stream(s, indent + "  ", v.badsegments);
    s << indent << "udperrors: ";
    Printer<int64_t>::stream(s, indent + "  ", v.udperrors);
    s << indent << "tx_retires: ";
    Printer<int64_t>::stream(s, indent + "  ", v.tx_retires);
    s << indent << "rx_dropped: ";
    Printer<int64_t>::stream(s, indent + "  ", v.rx_dropped);
    s << indent << "nic_tx_errors: ";
    Printer<int64_t>::stream(s, indent + "  ", v.nic_tx_errors);
    s << indent << "nic_rx_errors: ";
    Printer<int64_t>::stream(s, indent + "  ", v.nic_rx_errors);
    s << indent << "nic_tx_dropped: ";
    Printer<int64_t>::stream(s, indent + "  ", v.nic_tx_dropped);
    s << indent << "nic_rx_dropped: ";
    Printer<int64_t>::stream(s, indent + "  ", v.nic_rx_dropped);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NETWORKANALYSIS_MSGS_MESSAGE_NETWORKERRORS_H
