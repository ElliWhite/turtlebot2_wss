// Generated by gencpp from file patrolling_build_graph_msgs/Graph.msg
// DO NOT EDIT!


#ifndef PATROLLING_BUILD_GRAPH_MSGS_MESSAGE_GRAPH_H
#define PATROLLING_BUILD_GRAPH_MSGS_MESSAGE_GRAPH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>

namespace patrolling_build_graph_msgs
{
template <class ContainerAllocator>
struct Graph_
{
  typedef Graph_<ContainerAllocator> Type;

  Graph_()
    : header()
    , num_nodes(0)
    , node_id()
    , node_priority()
    , node_position()
    , num_neighbours()
    , adjacency_matrix()
    , direction_matrix()
    , cost_matrix()  {
    }
  Graph_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , num_nodes(0)
    , node_id(_alloc)
    , node_priority(_alloc)
    , node_position(_alloc)
    , num_neighbours(_alloc)
    , adjacency_matrix(_alloc)
    , direction_matrix(_alloc)
    , cost_matrix(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _num_nodes_type;
  _num_nodes_type num_nodes;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _node_id_type;
  _node_id_type node_id;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _node_priority_type;
  _node_priority_type node_priority;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _node_position_type;
  _node_position_type node_position;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _num_neighbours_type;
  _num_neighbours_type num_neighbours;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _adjacency_matrix_type;
  _adjacency_matrix_type adjacency_matrix;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _direction_matrix_type;
  _direction_matrix_type direction_matrix;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _cost_matrix_type;
  _cost_matrix_type cost_matrix;





  typedef boost::shared_ptr< ::patrolling_build_graph_msgs::Graph_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::patrolling_build_graph_msgs::Graph_<ContainerAllocator> const> ConstPtr;

}; // struct Graph_

typedef ::patrolling_build_graph_msgs::Graph_<std::allocator<void> > Graph;

typedef boost::shared_ptr< ::patrolling_build_graph_msgs::Graph > GraphPtr;
typedef boost::shared_ptr< ::patrolling_build_graph_msgs::Graph const> GraphConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::patrolling_build_graph_msgs::Graph_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::patrolling_build_graph_msgs::Graph_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace patrolling_build_graph_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'patrolling_build_graph_msgs': ['/home/elliottwhite/turtlebot2_wss/turtlebot_navigation_ws/src/tradr-msgs/patrolling_build_graph_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'visualization_msgs': ['/opt/ros/kinetic/share/visualization_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::patrolling_build_graph_msgs::Graph_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::patrolling_build_graph_msgs::Graph_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::patrolling_build_graph_msgs::Graph_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::patrolling_build_graph_msgs::Graph_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::patrolling_build_graph_msgs::Graph_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::patrolling_build_graph_msgs::Graph_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::patrolling_build_graph_msgs::Graph_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d69255e3eec9f9e951fee08ed363da41";
  }

  static const char* value(const ::patrolling_build_graph_msgs::Graph_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd69255e3eec9f9e9ULL;
  static const uint64_t static_value2 = 0x51fee08ed363da41ULL;
};

template<class ContainerAllocator>
struct DataType< ::patrolling_build_graph_msgs::Graph_<ContainerAllocator> >
{
  static const char* value()
  {
    return "patrolling_build_graph_msgs/Graph";
  }

  static const char* value(const ::patrolling_build_graph_msgs::Graph_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::patrolling_build_graph_msgs::Graph_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A reference coordinate frame and timestamp\n\
Header header\n\
\n\
# 3D spatial graph\n\
\n\
# general information\n\
uint32   num_nodes  # graph number of nodes\n\
\n\
# lists (i-th item of each list contains information concerning the i-th node)\n\
uint32[] node_id                     # node id\n\
float32[] node_priority              # priority of a node\n\
geometry_msgs/Point[] node_position  # node position\n\
uint32[] num_neighbours              # number of neighbours, should be at most 8\n\
\n\
# matrices of size num_nodes x num_nodes in row-major order \n\
bool[]    adjacency_matrix\n\
string[]  direction_matrix  # a string in {\"N\",\"NE\",\"E\",\"SE\",\"S\",\"SW\",\"W\",\"NW\"}\n\
float32[] cost_matrix\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::patrolling_build_graph_msgs::Graph_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::patrolling_build_graph_msgs::Graph_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.num_nodes);
      stream.next(m.node_id);
      stream.next(m.node_priority);
      stream.next(m.node_position);
      stream.next(m.num_neighbours);
      stream.next(m.adjacency_matrix);
      stream.next(m.direction_matrix);
      stream.next(m.cost_matrix);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Graph_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::patrolling_build_graph_msgs::Graph_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::patrolling_build_graph_msgs::Graph_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "num_nodes: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num_nodes);
    s << indent << "node_id[]" << std::endl;
    for (size_t i = 0; i < v.node_id.size(); ++i)
    {
      s << indent << "  node_id[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.node_id[i]);
    }
    s << indent << "node_priority[]" << std::endl;
    for (size_t i = 0; i < v.node_priority.size(); ++i)
    {
      s << indent << "  node_priority[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.node_priority[i]);
    }
    s << indent << "node_position[]" << std::endl;
    for (size_t i = 0; i < v.node_position.size(); ++i)
    {
      s << indent << "  node_position[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.node_position[i]);
    }
    s << indent << "num_neighbours[]" << std::endl;
    for (size_t i = 0; i < v.num_neighbours.size(); ++i)
    {
      s << indent << "  num_neighbours[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.num_neighbours[i]);
    }
    s << indent << "adjacency_matrix[]" << std::endl;
    for (size_t i = 0; i < v.adjacency_matrix.size(); ++i)
    {
      s << indent << "  adjacency_matrix[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.adjacency_matrix[i]);
    }
    s << indent << "direction_matrix[]" << std::endl;
    for (size_t i = 0; i < v.direction_matrix.size(); ++i)
    {
      s << indent << "  direction_matrix[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.direction_matrix[i]);
    }
    s << indent << "cost_matrix[]" << std::endl;
    for (size_t i = 0; i < v.cost_matrix.size(); ++i)
    {
      s << indent << "  cost_matrix[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.cost_matrix[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATROLLING_BUILD_GRAPH_MSGS_MESSAGE_GRAPH_H
