// Generated by gencpp from file patrolling_build_graph_msgs/BuildGraphEvent.msg
// DO NOT EDIT!


#ifndef PATROLLING_BUILD_GRAPH_MSGS_MESSAGE_BUILDGRAPHEVENT_H
#define PATROLLING_BUILD_GRAPH_MSGS_MESSAGE_BUILDGRAPHEVENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace patrolling_build_graph_msgs
{
template <class ContainerAllocator>
struct BuildGraphEvent_
{
  typedef BuildGraphEvent_<ContainerAllocator> Type;

  BuildGraphEvent_()
    : event(0)  {
    }
  BuildGraphEvent_(const ContainerAllocator& _alloc)
    : event(0)  {
  (void)_alloc;
    }



   typedef uint8_t _event_type;
  _event_type event;



  enum {
    START_PATROLLING = 0u,
    GRAPH_BUILT = 1u,
    STOP_PATROLLING = 2u,
    GRAPH_RECEIVED = 3u,
  };


  typedef boost::shared_ptr< ::patrolling_build_graph_msgs::BuildGraphEvent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::patrolling_build_graph_msgs::BuildGraphEvent_<ContainerAllocator> const> ConstPtr;

}; // struct BuildGraphEvent_

typedef ::patrolling_build_graph_msgs::BuildGraphEvent_<std::allocator<void> > BuildGraphEvent;

typedef boost::shared_ptr< ::patrolling_build_graph_msgs::BuildGraphEvent > BuildGraphEventPtr;
typedef boost::shared_ptr< ::patrolling_build_graph_msgs::BuildGraphEvent const> BuildGraphEventConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::patrolling_build_graph_msgs::BuildGraphEvent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::patrolling_build_graph_msgs::BuildGraphEvent_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace patrolling_build_graph_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'patrolling_build_graph_msgs': ['/home/elliottwhite/turtlebot2_wss/turtlebot_navigation_ws/src/tradr-msgs/patrolling_build_graph_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'visualization_msgs': ['/opt/ros/kinetic/share/visualization_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::patrolling_build_graph_msgs::BuildGraphEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::patrolling_build_graph_msgs::BuildGraphEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::patrolling_build_graph_msgs::BuildGraphEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::patrolling_build_graph_msgs::BuildGraphEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::patrolling_build_graph_msgs::BuildGraphEvent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::patrolling_build_graph_msgs::BuildGraphEvent_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::patrolling_build_graph_msgs::BuildGraphEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3da7b66974d2acb49f04c8e9d05dd91f";
  }

  static const char* value(const ::patrolling_build_graph_msgs::BuildGraphEvent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3da7b66974d2acb4ULL;
  static const uint64_t static_value2 = 0x9f04c8e9d05dd91fULL;
};

template<class ContainerAllocator>
struct DataType< ::patrolling_build_graph_msgs::BuildGraphEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "patrolling_build_graph_msgs/BuildGraphEvent";
  }

  static const char* value(const ::patrolling_build_graph_msgs::BuildGraphEvent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::patrolling_build_graph_msgs::BuildGraphEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 START_PATROLLING=0  # waiting for graph \n\
uint8 GRAPH_BUILT=1       # graph built on the same computer \n\
uint8 STOP_PATROLLING=2    \n\
uint8 GRAPH_RECEIVED=3    # graph received through message \n\
uint8 event\n\
\n\
";
  }

  static const char* value(const ::patrolling_build_graph_msgs::BuildGraphEvent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::patrolling_build_graph_msgs::BuildGraphEvent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.event);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BuildGraphEvent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::patrolling_build_graph_msgs::BuildGraphEvent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::patrolling_build_graph_msgs::BuildGraphEvent_<ContainerAllocator>& v)
  {
    s << indent << "event: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.event);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATROLLING_BUILD_GRAPH_MSGS_MESSAGE_BUILDGRAPHEVENT_H
