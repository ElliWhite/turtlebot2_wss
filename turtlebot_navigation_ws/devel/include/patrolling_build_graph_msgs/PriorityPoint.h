// Generated by gencpp from file patrolling_build_graph_msgs/PriorityPoint.msg
// DO NOT EDIT!


#ifndef PATROLLING_BUILD_GRAPH_MSGS_MESSAGE_PRIORITYPOINT_H
#define PATROLLING_BUILD_GRAPH_MSGS_MESSAGE_PRIORITYPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>

namespace patrolling_build_graph_msgs
{
template <class ContainerAllocator>
struct PriorityPoint_
{
  typedef PriorityPoint_<ContainerAllocator> Type;

  PriorityPoint_()
    : header()
    , id(0)
    , position()
    , priority(0.0)  {
    }
  PriorityPoint_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(0)
    , position(_alloc)
    , priority(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _id_type;
  _id_type id;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef float _priority_type;
  _priority_type priority;





  typedef boost::shared_ptr< ::patrolling_build_graph_msgs::PriorityPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::patrolling_build_graph_msgs::PriorityPoint_<ContainerAllocator> const> ConstPtr;

}; // struct PriorityPoint_

typedef ::patrolling_build_graph_msgs::PriorityPoint_<std::allocator<void> > PriorityPoint;

typedef boost::shared_ptr< ::patrolling_build_graph_msgs::PriorityPoint > PriorityPointPtr;
typedef boost::shared_ptr< ::patrolling_build_graph_msgs::PriorityPoint const> PriorityPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::patrolling_build_graph_msgs::PriorityPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::patrolling_build_graph_msgs::PriorityPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace patrolling_build_graph_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'patrolling_build_graph_msgs': ['/home/elliottwhite/turtlebot2_wss/turtlebot_navigation_ws/src/tradr-msgs/patrolling_build_graph_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'visualization_msgs': ['/opt/ros/kinetic/share/visualization_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::patrolling_build_graph_msgs::PriorityPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::patrolling_build_graph_msgs::PriorityPoint_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::patrolling_build_graph_msgs::PriorityPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::patrolling_build_graph_msgs::PriorityPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::patrolling_build_graph_msgs::PriorityPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::patrolling_build_graph_msgs::PriorityPoint_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::patrolling_build_graph_msgs::PriorityPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d9470f86891275d35ddc7e5ebe6a205f";
  }

  static const char* value(const ::patrolling_build_graph_msgs::PriorityPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd9470f86891275d3ULL;
  static const uint64_t static_value2 = 0x5ddc7e5ebe6a205fULL;
};

template<class ContainerAllocator>
struct DataType< ::patrolling_build_graph_msgs::PriorityPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "patrolling_build_graph_msgs/PriorityPoint";
  }

  static const char* value(const ::patrolling_build_graph_msgs::PriorityPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::patrolling_build_graph_msgs::PriorityPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A reference coordinate frame and timestamp\n\
Header header\n\
\n\
uint32 id                     # id\n\
geometry_msgs/Point position  # position\n\
float32 priority              # priority \n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::patrolling_build_graph_msgs::PriorityPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::patrolling_build_graph_msgs::PriorityPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.position);
      stream.next(m.priority);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PriorityPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::patrolling_build_graph_msgs::PriorityPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::patrolling_build_graph_msgs::PriorityPoint_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "priority: ";
    Printer<float>::stream(s, indent + "  ", v.priority);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATROLLING_BUILD_GRAPH_MSGS_MESSAGE_PRIORITYPOINT_H
