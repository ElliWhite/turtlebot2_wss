// Generated by gencpp from file wireless_network_msgs/linkutilization.msg
// DO NOT EDIT!


#ifndef WIRELESS_NETWORK_MSGS_MESSAGE_LINKUTILIZATION_H
#define WIRELESS_NETWORK_MSGS_MESSAGE_LINKUTILIZATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace wireless_network_msgs
{
template <class ContainerAllocator>
struct linkutilization_
{
  typedef linkutilization_<ContainerAllocator> Type;

  linkutilization_()
    : header()
    , tcp_tx_segments(0)
    , tcp_rx_segments(0)
    , tcp_tx_segmentrate(0.0)
    , tcp_rx_segmentrate(0.0)
    , udp_tx_datagrams(0)
    , udp_rx_datagrams(0)
    , udp_tx_datagramrate(0.0)
    , udp_rx_datagramrate(0.0)
    , total_tx_packets(0)
    , total_tx_bytes(0)
    , total_rx_packets(0)
    , total_rx_bytes(0)
    , total_tx_mbps(0.0)
    , total_rx_mbps(0.0)  {
    }
  linkutilization_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , tcp_tx_segments(0)
    , tcp_rx_segments(0)
    , tcp_tx_segmentrate(0.0)
    , tcp_rx_segmentrate(0.0)
    , udp_tx_datagrams(0)
    , udp_rx_datagrams(0)
    , udp_tx_datagramrate(0.0)
    , udp_rx_datagramrate(0.0)
    , total_tx_packets(0)
    , total_tx_bytes(0)
    , total_rx_packets(0)
    , total_rx_bytes(0)
    , total_tx_mbps(0.0)
    , total_rx_mbps(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int64_t _tcp_tx_segments_type;
  _tcp_tx_segments_type tcp_tx_segments;

   typedef int64_t _tcp_rx_segments_type;
  _tcp_rx_segments_type tcp_rx_segments;

   typedef double _tcp_tx_segmentrate_type;
  _tcp_tx_segmentrate_type tcp_tx_segmentrate;

   typedef double _tcp_rx_segmentrate_type;
  _tcp_rx_segmentrate_type tcp_rx_segmentrate;

   typedef int64_t _udp_tx_datagrams_type;
  _udp_tx_datagrams_type udp_tx_datagrams;

   typedef int64_t _udp_rx_datagrams_type;
  _udp_rx_datagrams_type udp_rx_datagrams;

   typedef double _udp_tx_datagramrate_type;
  _udp_tx_datagramrate_type udp_tx_datagramrate;

   typedef double _udp_rx_datagramrate_type;
  _udp_rx_datagramrate_type udp_rx_datagramrate;

   typedef int64_t _total_tx_packets_type;
  _total_tx_packets_type total_tx_packets;

   typedef int64_t _total_tx_bytes_type;
  _total_tx_bytes_type total_tx_bytes;

   typedef int64_t _total_rx_packets_type;
  _total_rx_packets_type total_rx_packets;

   typedef int64_t _total_rx_bytes_type;
  _total_rx_bytes_type total_rx_bytes;

   typedef double _total_tx_mbps_type;
  _total_tx_mbps_type total_tx_mbps;

   typedef double _total_rx_mbps_type;
  _total_rx_mbps_type total_rx_mbps;





  typedef boost::shared_ptr< ::wireless_network_msgs::linkutilization_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wireless_network_msgs::linkutilization_<ContainerAllocator> const> ConstPtr;

}; // struct linkutilization_

typedef ::wireless_network_msgs::linkutilization_<std::allocator<void> > linkutilization;

typedef boost::shared_ptr< ::wireless_network_msgs::linkutilization > linkutilizationPtr;
typedef boost::shared_ptr< ::wireless_network_msgs::linkutilization const> linkutilizationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wireless_network_msgs::linkutilization_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wireless_network_msgs::linkutilization_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace wireless_network_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'wireless_network_msgs': ['/home/elliottwhite/turtlebot2_wss/turtlebot_navigation_ws/src/tradr-msgs/wireless_network_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::wireless_network_msgs::linkutilization_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wireless_network_msgs::linkutilization_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wireless_network_msgs::linkutilization_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wireless_network_msgs::linkutilization_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wireless_network_msgs::linkutilization_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wireless_network_msgs::linkutilization_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wireless_network_msgs::linkutilization_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c1b31e7f399b226658f6062ec5c03a38";
  }

  static const char* value(const ::wireless_network_msgs::linkutilization_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc1b31e7f399b2266ULL;
  static const uint64_t static_value2 = 0x58f6062ec5c03a38ULL;
};

template<class ContainerAllocator>
struct DataType< ::wireless_network_msgs::linkutilization_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wireless_network_msgs/linkutilization";
  }

  static const char* value(const ::wireless_network_msgs::linkutilization_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wireless_network_msgs::linkutilization_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
#TCP related information on link utilization for a given (NIC) interface\n\
int64 tcp_tx_segments\n\
int64 tcp_rx_segments\n\
float64 tcp_tx_segmentrate\n\
float64 tcp_rx_segmentrate\n\
\n\
#UDP related information on link utilization for a given (NIC) interface\n\
int64 udp_tx_datagrams\n\
int64 udp_rx_datagrams\n\
float64 udp_tx_datagramrate\n\
float64 udp_rx_datagramrate\n\
\n\
#Total (IP: TCP + UDP) link utilization for a given (NIC) interface\n\
int64 total_tx_packets\n\
int64 total_tx_bytes\n\
int64 total_rx_packets\n\
int64 total_rx_bytes\n\
float64 total_tx_mbps\n\
float64 total_rx_mbps\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::wireless_network_msgs::linkutilization_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wireless_network_msgs::linkutilization_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.tcp_tx_segments);
      stream.next(m.tcp_rx_segments);
      stream.next(m.tcp_tx_segmentrate);
      stream.next(m.tcp_rx_segmentrate);
      stream.next(m.udp_tx_datagrams);
      stream.next(m.udp_rx_datagrams);
      stream.next(m.udp_tx_datagramrate);
      stream.next(m.udp_rx_datagramrate);
      stream.next(m.total_tx_packets);
      stream.next(m.total_tx_bytes);
      stream.next(m.total_rx_packets);
      stream.next(m.total_rx_bytes);
      stream.next(m.total_tx_mbps);
      stream.next(m.total_rx_mbps);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct linkutilization_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wireless_network_msgs::linkutilization_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wireless_network_msgs::linkutilization_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "tcp_tx_segments: ";
    Printer<int64_t>::stream(s, indent + "  ", v.tcp_tx_segments);
    s << indent << "tcp_rx_segments: ";
    Printer<int64_t>::stream(s, indent + "  ", v.tcp_rx_segments);
    s << indent << "tcp_tx_segmentrate: ";
    Printer<double>::stream(s, indent + "  ", v.tcp_tx_segmentrate);
    s << indent << "tcp_rx_segmentrate: ";
    Printer<double>::stream(s, indent + "  ", v.tcp_rx_segmentrate);
    s << indent << "udp_tx_datagrams: ";
    Printer<int64_t>::stream(s, indent + "  ", v.udp_tx_datagrams);
    s << indent << "udp_rx_datagrams: ";
    Printer<int64_t>::stream(s, indent + "  ", v.udp_rx_datagrams);
    s << indent << "udp_tx_datagramrate: ";
    Printer<double>::stream(s, indent + "  ", v.udp_tx_datagramrate);
    s << indent << "udp_rx_datagramrate: ";
    Printer<double>::stream(s, indent + "  ", v.udp_rx_datagramrate);
    s << indent << "total_tx_packets: ";
    Printer<int64_t>::stream(s, indent + "  ", v.total_tx_packets);
    s << indent << "total_tx_bytes: ";
    Printer<int64_t>::stream(s, indent + "  ", v.total_tx_bytes);
    s << indent << "total_rx_packets: ";
    Printer<int64_t>::stream(s, indent + "  ", v.total_rx_packets);
    s << indent << "total_rx_bytes: ";
    Printer<int64_t>::stream(s, indent + "  ", v.total_rx_bytes);
    s << indent << "total_tx_mbps: ";
    Printer<double>::stream(s, indent + "  ", v.total_tx_mbps);
    s << indent << "total_rx_mbps: ";
    Printer<double>::stream(s, indent + "  ", v.total_rx_mbps);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WIRELESS_NETWORK_MSGS_MESSAGE_LINKUTILIZATION_H
