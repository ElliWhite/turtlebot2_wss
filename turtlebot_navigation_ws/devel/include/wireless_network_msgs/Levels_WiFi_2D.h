// Generated by gencpp from file wireless_network_msgs/Levels_WiFi_2D.msg
// DO NOT EDIT!


#ifndef WIRELESS_NETWORK_MSGS_MESSAGE_LEVELS_WIFI_2D_H
#define WIRELESS_NETWORK_MSGS_MESSAGE_LEVELS_WIFI_2D_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace wireless_network_msgs
{
template <class ContainerAllocator>
struct Levels_WiFi_2D_
{
  typedef Levels_WiFi_2D_<ContainerAllocator> Type;

  Levels_WiFi_2D_()
    : header()
    , LL_level(0.0)
    , LR_level(0.0)
    , UL_level(0.0)
    , UR_level(0.0)
    , C_level(0.0)
    , LL_level_abs(0.0)
    , LR_level_abs(0.0)
    , UL_level_abs(0.0)
    , UR_level_abs(0.0)
    , C_level_abs(0.0)  {
    }
  Levels_WiFi_2D_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , LL_level(0.0)
    , LR_level(0.0)
    , UL_level(0.0)
    , UR_level(0.0)
    , C_level(0.0)
    , LL_level_abs(0.0)
    , LR_level_abs(0.0)
    , UL_level_abs(0.0)
    , UR_level_abs(0.0)
    , C_level_abs(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _LL_level_type;
  _LL_level_type LL_level;

   typedef float _LR_level_type;
  _LR_level_type LR_level;

   typedef float _UL_level_type;
  _UL_level_type UL_level;

   typedef float _UR_level_type;
  _UR_level_type UR_level;

   typedef float _C_level_type;
  _C_level_type C_level;

   typedef float _LL_level_abs_type;
  _LL_level_abs_type LL_level_abs;

   typedef float _LR_level_abs_type;
  _LR_level_abs_type LR_level_abs;

   typedef float _UL_level_abs_type;
  _UL_level_abs_type UL_level_abs;

   typedef float _UR_level_abs_type;
  _UR_level_abs_type UR_level_abs;

   typedef float _C_level_abs_type;
  _C_level_abs_type C_level_abs;





  typedef boost::shared_ptr< ::wireless_network_msgs::Levels_WiFi_2D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wireless_network_msgs::Levels_WiFi_2D_<ContainerAllocator> const> ConstPtr;

}; // struct Levels_WiFi_2D_

typedef ::wireless_network_msgs::Levels_WiFi_2D_<std::allocator<void> > Levels_WiFi_2D;

typedef boost::shared_ptr< ::wireless_network_msgs::Levels_WiFi_2D > Levels_WiFi_2DPtr;
typedef boost::shared_ptr< ::wireless_network_msgs::Levels_WiFi_2D const> Levels_WiFi_2DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wireless_network_msgs::Levels_WiFi_2D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wireless_network_msgs::Levels_WiFi_2D_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace wireless_network_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'wireless_network_msgs': ['/home/elliottwhite/turtlebot2_wss/turtlebot_navigation_ws/src/tradr-msgs/wireless_network_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::wireless_network_msgs::Levels_WiFi_2D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wireless_network_msgs::Levels_WiFi_2D_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wireless_network_msgs::Levels_WiFi_2D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wireless_network_msgs::Levels_WiFi_2D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wireless_network_msgs::Levels_WiFi_2D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wireless_network_msgs::Levels_WiFi_2D_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wireless_network_msgs::Levels_WiFi_2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b6a31ec136ad71020ee606788242b927";
  }

  static const char* value(const ::wireless_network_msgs::Levels_WiFi_2D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb6a31ec136ad7102ULL;
  static const uint64_t static_value2 = 0x0ee606788242b927ULL;
};

template<class ContainerAllocator>
struct DataType< ::wireless_network_msgs::Levels_WiFi_2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wireless_network_msgs/Levels_WiFi_2D";
  }

  static const char* value(const ::wireless_network_msgs::Levels_WiFi_2D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wireless_network_msgs::Levels_WiFi_2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
float32 LL_level \n\
# Lower left WiFi signal in a normalized scale (1-100)\n\
\n\
float32 LR_level \n\
# Lower Right WiFi signal in a normalized scale (1-100)\n\
\n\
float32 UL_level \n\
# Upper Left WiFi signal in a normalized scale (1-100)\n\
\n\
float32 UR_level \n\
# Upper Right WiFi signal in a normalized scale (1-100)\n\
\n\
float32 C_level \n\
# Center WiFi signal in a normalized scale (1-100)\n\
\n\
float32 LL_level_abs \n\
# Lower Left WiFi signal in dBm\n\
\n\
float32 LR_level_abs \n\
# Lower Right WiFi signal in dBm\n\
\n\
float32 UL_level_abs \n\
# Lower Left WiFi signal in dBm\n\
\n\
float32 UR_level_abs \n\
# Upper Right WiFi signal in dBm\n\
\n\
float32 C_level_abs \n\
# Center WiFi signal in dBm\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::wireless_network_msgs::Levels_WiFi_2D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wireless_network_msgs::Levels_WiFi_2D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.LL_level);
      stream.next(m.LR_level);
      stream.next(m.UL_level);
      stream.next(m.UR_level);
      stream.next(m.C_level);
      stream.next(m.LL_level_abs);
      stream.next(m.LR_level_abs);
      stream.next(m.UL_level_abs);
      stream.next(m.UR_level_abs);
      stream.next(m.C_level_abs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Levels_WiFi_2D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wireless_network_msgs::Levels_WiFi_2D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wireless_network_msgs::Levels_WiFi_2D_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "LL_level: ";
    Printer<float>::stream(s, indent + "  ", v.LL_level);
    s << indent << "LR_level: ";
    Printer<float>::stream(s, indent + "  ", v.LR_level);
    s << indent << "UL_level: ";
    Printer<float>::stream(s, indent + "  ", v.UL_level);
    s << indent << "UR_level: ";
    Printer<float>::stream(s, indent + "  ", v.UR_level);
    s << indent << "C_level: ";
    Printer<float>::stream(s, indent + "  ", v.C_level);
    s << indent << "LL_level_abs: ";
    Printer<float>::stream(s, indent + "  ", v.LL_level_abs);
    s << indent << "LR_level_abs: ";
    Printer<float>::stream(s, indent + "  ", v.LR_level_abs);
    s << indent << "UL_level_abs: ";
    Printer<float>::stream(s, indent + "  ", v.UL_level_abs);
    s << indent << "UR_level_abs: ";
    Printer<float>::stream(s, indent + "  ", v.UR_level_abs);
    s << indent << "C_level_abs: ";
    Printer<float>::stream(s, indent + "  ", v.C_level_abs);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WIRELESS_NETWORK_MSGS_MESSAGE_LEVELS_WIFI_2D_H
