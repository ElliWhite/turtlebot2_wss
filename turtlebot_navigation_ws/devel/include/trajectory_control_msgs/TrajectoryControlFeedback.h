// Generated by gencpp from file trajectory_control_msgs/TrajectoryControlFeedback.msg
// DO NOT EDIT!


#ifndef TRAJECTORY_CONTROL_MSGS_MESSAGE_TRAJECTORYCONTROLFEEDBACK_H
#define TRAJECTORY_CONTROL_MSGS_MESSAGE_TRAJECTORYCONTROLFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Twist.h>
#include <nifti_robot_driver_msgs/Tracks.h>
#include <std_msgs/Int32.h>
#include <nifti_robot_driver_msgs/FlippersStateStamped.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>

namespace trajectory_control_msgs
{
template <class ContainerAllocator>
struct TrajectoryControlFeedback_
{
  typedef TrajectoryControlFeedback_<ContainerAllocator> Type;

  TrajectoryControlFeedback_()
    : timestep(0.0)
    , cmd_vel()
    , tracks_cmd()
    , posture_cmd()
    , flippers_state()
    , trajectory_error()
    , virtual_reference_pose()
    , robot_pose()  {
    }
  TrajectoryControlFeedback_(const ContainerAllocator& _alloc)
    : timestep(0.0)
    , cmd_vel(_alloc)
    , tracks_cmd(_alloc)
    , posture_cmd(_alloc)
    , flippers_state(_alloc)
    , trajectory_error(_alloc)
    , virtual_reference_pose(_alloc)
    , robot_pose(_alloc)  {
  (void)_alloc;
    }



   typedef double _timestep_type;
  _timestep_type timestep;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _cmd_vel_type;
  _cmd_vel_type cmd_vel;

   typedef  ::nifti_robot_driver_msgs::Tracks_<ContainerAllocator>  _tracks_cmd_type;
  _tracks_cmd_type tracks_cmd;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _posture_cmd_type;
  _posture_cmd_type posture_cmd;

   typedef  ::nifti_robot_driver_msgs::FlippersStateStamped_<ContainerAllocator>  _flippers_state_type;
  _flippers_state_type flippers_state;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _trajectory_error_type;
  _trajectory_error_type trajectory_error;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _virtual_reference_pose_type;
  _virtual_reference_pose_type virtual_reference_pose;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _robot_pose_type;
  _robot_pose_type robot_pose;





  typedef boost::shared_ptr< ::trajectory_control_msgs::TrajectoryControlFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::trajectory_control_msgs::TrajectoryControlFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryControlFeedback_

typedef ::trajectory_control_msgs::TrajectoryControlFeedback_<std::allocator<void> > TrajectoryControlFeedback;

typedef boost::shared_ptr< ::trajectory_control_msgs::TrajectoryControlFeedback > TrajectoryControlFeedbackPtr;
typedef boost::shared_ptr< ::trajectory_control_msgs::TrajectoryControlFeedback const> TrajectoryControlFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::trajectory_control_msgs::TrajectoryControlFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::trajectory_control_msgs::TrajectoryControlFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace trajectory_control_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'nifti_robot_driver_msgs': ['/home/elliottwhite/turtlebot2_wss/turtlebot_navigation_ws/src/tradr-msgs/nifti_robot_driver_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'visualization_msgs': ['/opt/ros/kinetic/share/visualization_msgs/cmake/../msg'], 'trajectory_control_msgs': ['/home/elliottwhite/turtlebot2_wss/turtlebot_navigation_ws/src/tradr-msgs/trajectory_control_msgs/msg', '/home/elliottwhite/turtlebot2_wss/turtlebot_navigation_ws/devel/share/trajectory_control_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::trajectory_control_msgs::TrajectoryControlFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::trajectory_control_msgs::TrajectoryControlFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trajectory_control_msgs::TrajectoryControlFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trajectory_control_msgs::TrajectoryControlFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trajectory_control_msgs::TrajectoryControlFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trajectory_control_msgs::TrajectoryControlFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::trajectory_control_msgs::TrajectoryControlFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a4b7f31196641b87a18ac352f6126a78";
  }

  static const char* value(const ::trajectory_control_msgs::TrajectoryControlFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa4b7f31196641b87ULL;
  static const uint64_t static_value2 = 0xa18ac352f6126a78ULL;
};

template<class ContainerAllocator>
struct DataType< ::trajectory_control_msgs::TrajectoryControlFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "trajectory_control_msgs/TrajectoryControlFeedback";
  }

  static const char* value(const ::trajectory_control_msgs::TrajectoryControlFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::trajectory_control_msgs::TrajectoryControlFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Define a feedback message\n\
float64 timestep\n\
geometry_msgs/Twist cmd_vel\n\
nifti_robot_driver_msgs/Tracks tracks_cmd\n\
std_msgs/Int32 posture_cmd\n\
nifti_robot_driver_msgs/FlippersStateStamped flippers_state\n\
geometry_msgs/Vector3 trajectory_error\n\
geometry_msgs/Pose virtual_reference_pose\n\
geometry_msgs/Pose robot_pose\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: nifti_robot_driver_msgs/Tracks\n\
float64 left\n\
float64 right\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Int32\n\
int32 data\n\
================================================================================\n\
MSG: nifti_robot_driver_msgs/FlippersStateStamped\n\
Header header\n\
float64 frontLeft\n\
float64 frontRight\n\
float64 rearLeft\n\
float64 rearRight\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::trajectory_control_msgs::TrajectoryControlFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::trajectory_control_msgs::TrajectoryControlFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestep);
      stream.next(m.cmd_vel);
      stream.next(m.tracks_cmd);
      stream.next(m.posture_cmd);
      stream.next(m.flippers_state);
      stream.next(m.trajectory_error);
      stream.next(m.virtual_reference_pose);
      stream.next(m.robot_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryControlFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::trajectory_control_msgs::TrajectoryControlFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::trajectory_control_msgs::TrajectoryControlFeedback_<ContainerAllocator>& v)
  {
    s << indent << "timestep: ";
    Printer<double>::stream(s, indent + "  ", v.timestep);
    s << indent << "cmd_vel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.cmd_vel);
    s << indent << "tracks_cmd: ";
    s << std::endl;
    Printer< ::nifti_robot_driver_msgs::Tracks_<ContainerAllocator> >::stream(s, indent + "  ", v.tracks_cmd);
    s << indent << "posture_cmd: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.posture_cmd);
    s << indent << "flippers_state: ";
    s << std::endl;
    Printer< ::nifti_robot_driver_msgs::FlippersStateStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.flippers_state);
    s << indent << "trajectory_error: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.trajectory_error);
    s << indent << "virtual_reference_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.virtual_reference_pose);
    s << indent << "robot_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.robot_pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRAJECTORY_CONTROL_MSGS_MESSAGE_TRAJECTORYCONTROLFEEDBACK_H
