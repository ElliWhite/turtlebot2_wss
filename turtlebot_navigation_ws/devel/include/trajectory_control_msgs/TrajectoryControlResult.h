// Generated by gencpp from file trajectory_control_msgs/TrajectoryControlResult.msg
// DO NOT EDIT!


#ifndef TRAJECTORY_CONTROL_MSGS_MESSAGE_TRAJECTORYCONTROLRESULT_H
#define TRAJECTORY_CONTROL_MSGS_MESSAGE_TRAJECTORYCONTROLRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace trajectory_control_msgs
{
template <class ContainerAllocator>
struct TrajectoryControlResult_
{
  typedef TrajectoryControlResult_<ContainerAllocator> Type;

  TrajectoryControlResult_()
    : done(false)  {
    }
  TrajectoryControlResult_(const ContainerAllocator& _alloc)
    : done(false)  {
  (void)_alloc;
    }



   typedef uint8_t _done_type;
  _done_type done;





  typedef boost::shared_ptr< ::trajectory_control_msgs::TrajectoryControlResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::trajectory_control_msgs::TrajectoryControlResult_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryControlResult_

typedef ::trajectory_control_msgs::TrajectoryControlResult_<std::allocator<void> > TrajectoryControlResult;

typedef boost::shared_ptr< ::trajectory_control_msgs::TrajectoryControlResult > TrajectoryControlResultPtr;
typedef boost::shared_ptr< ::trajectory_control_msgs::TrajectoryControlResult const> TrajectoryControlResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::trajectory_control_msgs::TrajectoryControlResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::trajectory_control_msgs::TrajectoryControlResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace trajectory_control_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'nifti_robot_driver_msgs': ['/home/elliottwhite/turtlebot2_wss/turtlebot_navigation_ws/src/tradr-msgs/nifti_robot_driver_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'visualization_msgs': ['/opt/ros/kinetic/share/visualization_msgs/cmake/../msg'], 'trajectory_control_msgs': ['/home/elliottwhite/turtlebot2_wss/turtlebot_navigation_ws/src/tradr-msgs/trajectory_control_msgs/msg', '/home/elliottwhite/turtlebot2_wss/turtlebot_navigation_ws/devel/share/trajectory_control_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::trajectory_control_msgs::TrajectoryControlResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::trajectory_control_msgs::TrajectoryControlResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trajectory_control_msgs::TrajectoryControlResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trajectory_control_msgs::TrajectoryControlResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trajectory_control_msgs::TrajectoryControlResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trajectory_control_msgs::TrajectoryControlResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::trajectory_control_msgs::TrajectoryControlResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "89bb254424e4cffedbf494e7b0ddbfea";
  }

  static const char* value(const ::trajectory_control_msgs::TrajectoryControlResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x89bb254424e4cffeULL;
  static const uint64_t static_value2 = 0xdbf494e7b0ddbfeaULL;
};

template<class ContainerAllocator>
struct DataType< ::trajectory_control_msgs::TrajectoryControlResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "trajectory_control_msgs/TrajectoryControlResult";
  }

  static const char* value(const ::trajectory_control_msgs::TrajectoryControlResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::trajectory_control_msgs::TrajectoryControlResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Define the result\n\
bool done\n\
";
  }

  static const char* value(const ::trajectory_control_msgs::TrajectoryControlResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::trajectory_control_msgs::TrajectoryControlResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.done);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryControlResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::trajectory_control_msgs::TrajectoryControlResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::trajectory_control_msgs::TrajectoryControlResult_<ContainerAllocator>& v)
  {
    s << indent << "done: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.done);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRAJECTORY_CONTROL_MSGS_MESSAGE_TRAJECTORYCONTROLRESULT_H
