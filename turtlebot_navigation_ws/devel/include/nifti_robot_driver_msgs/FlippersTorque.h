// Generated by gencpp from file nifti_robot_driver_msgs/FlippersTorque.msg
// DO NOT EDIT!


#ifndef NIFTI_ROBOT_DRIVER_MSGS_MESSAGE_FLIPPERSTORQUE_H
#define NIFTI_ROBOT_DRIVER_MSGS_MESSAGE_FLIPPERSTORQUE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nifti_robot_driver_msgs
{
template <class ContainerAllocator>
struct FlippersTorque_
{
  typedef FlippersTorque_<ContainerAllocator> Type;

  FlippersTorque_()
    : front(0.0)
    , rear(0.0)  {
    }
  FlippersTorque_(const ContainerAllocator& _alloc)
    : front(0.0)
    , rear(0.0)  {
  (void)_alloc;
    }



   typedef double _front_type;
  _front_type front;

   typedef double _rear_type;
  _rear_type rear;





  typedef boost::shared_ptr< ::nifti_robot_driver_msgs::FlippersTorque_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nifti_robot_driver_msgs::FlippersTorque_<ContainerAllocator> const> ConstPtr;

}; // struct FlippersTorque_

typedef ::nifti_robot_driver_msgs::FlippersTorque_<std::allocator<void> > FlippersTorque;

typedef boost::shared_ptr< ::nifti_robot_driver_msgs::FlippersTorque > FlippersTorquePtr;
typedef boost::shared_ptr< ::nifti_robot_driver_msgs::FlippersTorque const> FlippersTorqueConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nifti_robot_driver_msgs::FlippersTorque_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nifti_robot_driver_msgs::FlippersTorque_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace nifti_robot_driver_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'nifti_robot_driver_msgs': ['/home/elliottwhite/turtlebot2_wss/turtlebot_navigation_ws/src/tradr-msgs/nifti_robot_driver_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::nifti_robot_driver_msgs::FlippersTorque_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nifti_robot_driver_msgs::FlippersTorque_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nifti_robot_driver_msgs::FlippersTorque_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nifti_robot_driver_msgs::FlippersTorque_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nifti_robot_driver_msgs::FlippersTorque_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nifti_robot_driver_msgs::FlippersTorque_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nifti_robot_driver_msgs::FlippersTorque_<ContainerAllocator> >
{
  static const char* value()
  {
    return "04b1a08465bee4bdf0e211984000b44b";
  }

  static const char* value(const ::nifti_robot_driver_msgs::FlippersTorque_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x04b1a08465bee4bdULL;
  static const uint64_t static_value2 = 0xf0e211984000b44bULL;
};

template<class ContainerAllocator>
struct DataType< ::nifti_robot_driver_msgs::FlippersTorque_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nifti_robot_driver_msgs/FlippersTorque";
  }

  static const char* value(const ::nifti_robot_driver_msgs::FlippersTorque_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nifti_robot_driver_msgs::FlippersTorque_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 front\n\
float64 rear\n\
";
  }

  static const char* value(const ::nifti_robot_driver_msgs::FlippersTorque_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nifti_robot_driver_msgs::FlippersTorque_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.front);
      stream.next(m.rear);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FlippersTorque_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nifti_robot_driver_msgs::FlippersTorque_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nifti_robot_driver_msgs::FlippersTorque_<ContainerAllocator>& v)
  {
    s << indent << "front: ";
    Printer<double>::stream(s, indent + "  ", v.front);
    s << indent << "rear: ";
    Printer<double>::stream(s, indent + "  ", v.rear);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIFTI_ROBOT_DRIVER_MSGS_MESSAGE_FLIPPERSTORQUE_H
