// Generated by gencpp from file nifti_robot_driver_msgs/RobotStatus.msg
// DO NOT EDIT!


#ifndef NIFTI_ROBOT_DRIVER_MSGS_MESSAGE_ROBOTSTATUS_H
#define NIFTI_ROBOT_DRIVER_MSGS_MESSAGE_ROBOTSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <nifti_robot_driver_msgs/ControllersStatus.h>
#include <nifti_robot_driver_msgs/ControllersStatus.h>

namespace nifti_robot_driver_msgs
{
template <class ContainerAllocator>
struct RobotStatus_
{
  typedef RobotStatus_<ContainerAllocator> Type;

  RobotStatus_()
    : battery_level(0.0)
    , battery_status(0)
    , brake_on(false)
    , scanning_speed(0.0)
    , controllers_status()
    , controllers_error()  {
    }
  RobotStatus_(const ContainerAllocator& _alloc)
    : battery_level(0.0)
    , battery_status(0)
    , brake_on(false)
    , scanning_speed(0.0)
    , controllers_status(_alloc)
    , controllers_error(_alloc)  {
  (void)_alloc;
    }



   typedef double _battery_level_type;
  _battery_level_type battery_level;

   typedef int32_t _battery_status_type;
  _battery_status_type battery_status;

   typedef uint8_t _brake_on_type;
  _brake_on_type brake_on;

   typedef double _scanning_speed_type;
  _scanning_speed_type scanning_speed;

   typedef  ::nifti_robot_driver_msgs::ControllersStatus_<ContainerAllocator>  _controllers_status_type;
  _controllers_status_type controllers_status;

   typedef  ::nifti_robot_driver_msgs::ControllersStatus_<ContainerAllocator>  _controllers_error_type;
  _controllers_error_type controllers_error;





  typedef boost::shared_ptr< ::nifti_robot_driver_msgs::RobotStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nifti_robot_driver_msgs::RobotStatus_<ContainerAllocator> const> ConstPtr;

}; // struct RobotStatus_

typedef ::nifti_robot_driver_msgs::RobotStatus_<std::allocator<void> > RobotStatus;

typedef boost::shared_ptr< ::nifti_robot_driver_msgs::RobotStatus > RobotStatusPtr;
typedef boost::shared_ptr< ::nifti_robot_driver_msgs::RobotStatus const> RobotStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nifti_robot_driver_msgs::RobotStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nifti_robot_driver_msgs::RobotStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace nifti_robot_driver_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'nifti_robot_driver_msgs': ['/home/elliottwhite/turtlebot2_wss/turtlebot_navigation_ws/src/tradr-msgs/nifti_robot_driver_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::nifti_robot_driver_msgs::RobotStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nifti_robot_driver_msgs::RobotStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nifti_robot_driver_msgs::RobotStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nifti_robot_driver_msgs::RobotStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nifti_robot_driver_msgs::RobotStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nifti_robot_driver_msgs::RobotStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nifti_robot_driver_msgs::RobotStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dd9c20e6dcc350dd2cee593b1860f212";
  }

  static const char* value(const ::nifti_robot_driver_msgs::RobotStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdd9c20e6dcc350ddULL;
  static const uint64_t static_value2 = 0x2cee593b1860f212ULL;
};

template<class ContainerAllocator>
struct DataType< ::nifti_robot_driver_msgs::RobotStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nifti_robot_driver_msgs/RobotStatus";
  }

  static const char* value(const ::nifti_robot_driver_msgs::RobotStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nifti_robot_driver_msgs::RobotStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#int32 BAT_CRITICAL=2\n\
#int32 BAT_WARNING=1\n\
#int32 BAT_OK=0\n\
float64 battery_level\n\
int32 battery_status\n\
bool brake_on\n\
float64 scanning_speed\n\
ControllersStatus controllers_status\n\
ControllersStatus controllers_error\n\
\n\
================================================================================\n\
MSG: nifti_robot_driver_msgs/ControllersStatus\n\
int32 core\n\
int32 track_left\n\
int32 track_right\n\
int32 flipper_front_left\n\
int32 flipper_front_right\n\
int32 flipper_rear_left\n\
int32 flipper_rear_right\n\
";
  }

  static const char* value(const ::nifti_robot_driver_msgs::RobotStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nifti_robot_driver_msgs::RobotStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.battery_level);
      stream.next(m.battery_status);
      stream.next(m.brake_on);
      stream.next(m.scanning_speed);
      stream.next(m.controllers_status);
      stream.next(m.controllers_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nifti_robot_driver_msgs::RobotStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nifti_robot_driver_msgs::RobotStatus_<ContainerAllocator>& v)
  {
    s << indent << "battery_level: ";
    Printer<double>::stream(s, indent + "  ", v.battery_level);
    s << indent << "battery_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.battery_status);
    s << indent << "brake_on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake_on);
    s << indent << "scanning_speed: ";
    Printer<double>::stream(s, indent + "  ", v.scanning_speed);
    s << indent << "controllers_status: ";
    s << std::endl;
    Printer< ::nifti_robot_driver_msgs::ControllersStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.controllers_status);
    s << indent << "controllers_error: ";
    s << std::endl;
    Printer< ::nifti_robot_driver_msgs::ControllersStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.controllers_error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIFTI_ROBOT_DRIVER_MSGS_MESSAGE_ROBOTSTATUS_H
