// Generated by gencpp from file nifti_robot_driver_msgs/RobotStatusStamped.msg
// DO NOT EDIT!


#ifndef NIFTI_ROBOT_DRIVER_MSGS_MESSAGE_ROBOTSTATUSSTAMPED_H
#define NIFTI_ROBOT_DRIVER_MSGS_MESSAGE_ROBOTSTATUSSTAMPED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <nifti_robot_driver_msgs/ControllersStatus.h>
#include <nifti_robot_driver_msgs/ControllersStatus.h>

namespace nifti_robot_driver_msgs
{
template <class ContainerAllocator>
struct RobotStatusStamped_
{
  typedef RobotStatusStamped_<ContainerAllocator> Type;

  RobotStatusStamped_()
    : header()
    , battery_level(0.0)
    , battery_status(0)
    , brake_on(false)
    , emergency_stop_on(false)
    , scanning_speed(0.0)
    , controllers_status()
    , controllers_error()  {
    }
  RobotStatusStamped_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , battery_level(0.0)
    , battery_status(0)
    , brake_on(false)
    , emergency_stop_on(false)
    , scanning_speed(0.0)
    , controllers_status(_alloc)
    , controllers_error(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _battery_level_type;
  _battery_level_type battery_level;

   typedef int32_t _battery_status_type;
  _battery_status_type battery_status;

   typedef uint8_t _brake_on_type;
  _brake_on_type brake_on;

   typedef uint8_t _emergency_stop_on_type;
  _emergency_stop_on_type emergency_stop_on;

   typedef double _scanning_speed_type;
  _scanning_speed_type scanning_speed;

   typedef  ::nifti_robot_driver_msgs::ControllersStatus_<ContainerAllocator>  _controllers_status_type;
  _controllers_status_type controllers_status;

   typedef  ::nifti_robot_driver_msgs::ControllersStatus_<ContainerAllocator>  _controllers_error_type;
  _controllers_error_type controllers_error;





  typedef boost::shared_ptr< ::nifti_robot_driver_msgs::RobotStatusStamped_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nifti_robot_driver_msgs::RobotStatusStamped_<ContainerAllocator> const> ConstPtr;

}; // struct RobotStatusStamped_

typedef ::nifti_robot_driver_msgs::RobotStatusStamped_<std::allocator<void> > RobotStatusStamped;

typedef boost::shared_ptr< ::nifti_robot_driver_msgs::RobotStatusStamped > RobotStatusStampedPtr;
typedef boost::shared_ptr< ::nifti_robot_driver_msgs::RobotStatusStamped const> RobotStatusStampedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nifti_robot_driver_msgs::RobotStatusStamped_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nifti_robot_driver_msgs::RobotStatusStamped_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace nifti_robot_driver_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'nifti_robot_driver_msgs': ['/home/elliottwhite/turtlebot2_wss/turtlebot_navigation_ws/src/tradr-msgs/nifti_robot_driver_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::nifti_robot_driver_msgs::RobotStatusStamped_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nifti_robot_driver_msgs::RobotStatusStamped_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nifti_robot_driver_msgs::RobotStatusStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nifti_robot_driver_msgs::RobotStatusStamped_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nifti_robot_driver_msgs::RobotStatusStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nifti_robot_driver_msgs::RobotStatusStamped_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nifti_robot_driver_msgs::RobotStatusStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "57c03a2db12d8cfa50a17fe84f95f4c8";
  }

  static const char* value(const ::nifti_robot_driver_msgs::RobotStatusStamped_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x57c03a2db12d8cfaULL;
  static const uint64_t static_value2 = 0x50a17fe84f95f4c8ULL;
};

template<class ContainerAllocator>
struct DataType< ::nifti_robot_driver_msgs::RobotStatusStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nifti_robot_driver_msgs/RobotStatusStamped";
  }

  static const char* value(const ::nifti_robot_driver_msgs::RobotStatusStamped_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nifti_robot_driver_msgs::RobotStatusStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
#int32 BAT_CRITICAL=2\n\
#int32 BAT_WARNING=1\n\
#int32 BAT_OK=0\n\
float64 battery_level\n\
int32 battery_status\n\
bool brake_on\n\
bool emergency_stop_on\n\
float64 scanning_speed\n\
ControllersStatus controllers_status\n\
ControllersStatus controllers_error\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: nifti_robot_driver_msgs/ControllersStatus\n\
int32 core\n\
int32 track_left\n\
int32 track_right\n\
int32 flipper_front_left\n\
int32 flipper_front_right\n\
int32 flipper_rear_left\n\
int32 flipper_rear_right\n\
";
  }

  static const char* value(const ::nifti_robot_driver_msgs::RobotStatusStamped_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nifti_robot_driver_msgs::RobotStatusStamped_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.battery_level);
      stream.next(m.battery_status);
      stream.next(m.brake_on);
      stream.next(m.emergency_stop_on);
      stream.next(m.scanning_speed);
      stream.next(m.controllers_status);
      stream.next(m.controllers_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotStatusStamped_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nifti_robot_driver_msgs::RobotStatusStamped_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nifti_robot_driver_msgs::RobotStatusStamped_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "battery_level: ";
    Printer<double>::stream(s, indent + "  ", v.battery_level);
    s << indent << "battery_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.battery_status);
    s << indent << "brake_on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake_on);
    s << indent << "emergency_stop_on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.emergency_stop_on);
    s << indent << "scanning_speed: ";
    Printer<double>::stream(s, indent + "  ", v.scanning_speed);
    s << indent << "controllers_status: ";
    s << std::endl;
    Printer< ::nifti_robot_driver_msgs::ControllersStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.controllers_status);
    s << indent << "controllers_error: ";
    s << std::endl;
    Printer< ::nifti_robot_driver_msgs::ControllersStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.controllers_error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIFTI_ROBOT_DRIVER_MSGS_MESSAGE_ROBOTSTATUSSTAMPED_H
