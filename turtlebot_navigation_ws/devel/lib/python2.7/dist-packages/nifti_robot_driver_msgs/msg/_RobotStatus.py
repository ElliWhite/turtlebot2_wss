# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from nifti_robot_driver_msgs/RobotStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import nifti_robot_driver_msgs.msg

class RobotStatus(genpy.Message):
  _md5sum = "dd9c20e6dcc350dd2cee593b1860f212"
  _type = "nifti_robot_driver_msgs/RobotStatus"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#int32 BAT_CRITICAL=2
#int32 BAT_WARNING=1
#int32 BAT_OK=0
float64 battery_level
int32 battery_status
bool brake_on
float64 scanning_speed
ControllersStatus controllers_status
ControllersStatus controllers_error

================================================================================
MSG: nifti_robot_driver_msgs/ControllersStatus
int32 core
int32 track_left
int32 track_right
int32 flipper_front_left
int32 flipper_front_right
int32 flipper_rear_left
int32 flipper_rear_right
"""
  __slots__ = ['battery_level','battery_status','brake_on','scanning_speed','controllers_status','controllers_error']
  _slot_types = ['float64','int32','bool','float64','nifti_robot_driver_msgs/ControllersStatus','nifti_robot_driver_msgs/ControllersStatus']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       battery_level,battery_status,brake_on,scanning_speed,controllers_status,controllers_error

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.battery_level is None:
        self.battery_level = 0.
      if self.battery_status is None:
        self.battery_status = 0
      if self.brake_on is None:
        self.brake_on = False
      if self.scanning_speed is None:
        self.scanning_speed = 0.
      if self.controllers_status is None:
        self.controllers_status = nifti_robot_driver_msgs.msg.ControllersStatus()
      if self.controllers_error is None:
        self.controllers_error = nifti_robot_driver_msgs.msg.ControllersStatus()
    else:
      self.battery_level = 0.
      self.battery_status = 0
      self.brake_on = False
      self.scanning_speed = 0.
      self.controllers_status = nifti_robot_driver_msgs.msg.ControllersStatus()
      self.controllers_error = nifti_robot_driver_msgs.msg.ControllersStatus()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_diBd14i().pack(_x.battery_level, _x.battery_status, _x.brake_on, _x.scanning_speed, _x.controllers_status.core, _x.controllers_status.track_left, _x.controllers_status.track_right, _x.controllers_status.flipper_front_left, _x.controllers_status.flipper_front_right, _x.controllers_status.flipper_rear_left, _x.controllers_status.flipper_rear_right, _x.controllers_error.core, _x.controllers_error.track_left, _x.controllers_error.track_right, _x.controllers_error.flipper_front_left, _x.controllers_error.flipper_front_right, _x.controllers_error.flipper_rear_left, _x.controllers_error.flipper_rear_right))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.controllers_status is None:
        self.controllers_status = nifti_robot_driver_msgs.msg.ControllersStatus()
      if self.controllers_error is None:
        self.controllers_error = nifti_robot_driver_msgs.msg.ControllersStatus()
      end = 0
      _x = self
      start = end
      end += 77
      (_x.battery_level, _x.battery_status, _x.brake_on, _x.scanning_speed, _x.controllers_status.core, _x.controllers_status.track_left, _x.controllers_status.track_right, _x.controllers_status.flipper_front_left, _x.controllers_status.flipper_front_right, _x.controllers_status.flipper_rear_left, _x.controllers_status.flipper_rear_right, _x.controllers_error.core, _x.controllers_error.track_left, _x.controllers_error.track_right, _x.controllers_error.flipper_front_left, _x.controllers_error.flipper_front_right, _x.controllers_error.flipper_rear_left, _x.controllers_error.flipper_rear_right,) = _get_struct_diBd14i().unpack(str[start:end])
      self.brake_on = bool(self.brake_on)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_diBd14i().pack(_x.battery_level, _x.battery_status, _x.brake_on, _x.scanning_speed, _x.controllers_status.core, _x.controllers_status.track_left, _x.controllers_status.track_right, _x.controllers_status.flipper_front_left, _x.controllers_status.flipper_front_right, _x.controllers_status.flipper_rear_left, _x.controllers_status.flipper_rear_right, _x.controllers_error.core, _x.controllers_error.track_left, _x.controllers_error.track_right, _x.controllers_error.flipper_front_left, _x.controllers_error.flipper_front_right, _x.controllers_error.flipper_rear_left, _x.controllers_error.flipper_rear_right))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.controllers_status is None:
        self.controllers_status = nifti_robot_driver_msgs.msg.ControllersStatus()
      if self.controllers_error is None:
        self.controllers_error = nifti_robot_driver_msgs.msg.ControllersStatus()
      end = 0
      _x = self
      start = end
      end += 77
      (_x.battery_level, _x.battery_status, _x.brake_on, _x.scanning_speed, _x.controllers_status.core, _x.controllers_status.track_left, _x.controllers_status.track_right, _x.controllers_status.flipper_front_left, _x.controllers_status.flipper_front_right, _x.controllers_status.flipper_rear_left, _x.controllers_status.flipper_rear_right, _x.controllers_error.core, _x.controllers_error.track_left, _x.controllers_error.track_right, _x.controllers_error.flipper_front_left, _x.controllers_error.flipper_front_right, _x.controllers_error.flipper_rear_left, _x.controllers_error.flipper_rear_right,) = _get_struct_diBd14i().unpack(str[start:end])
      self.brake_on = bool(self.brake_on)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_diBd14i = None
def _get_struct_diBd14i():
    global _struct_diBd14i
    if _struct_diBd14i is None:
        _struct_diBd14i = struct.Struct("<diBd14i")
    return _struct_diBd14i
