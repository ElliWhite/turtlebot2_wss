# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from networkanalysis_msgs/linkutilization.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class linkutilization(genpy.Message):
  _md5sum = "68677103f00920dc284ac20df3aa3180"
  _type = "networkanalysis_msgs/linkutilization"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#TCP related information on link utilization for a given (NIC) interface
int64 tcp_tx_segments
int64 tcp_rx_segments
float64 tcp_tx_segmentrate
float64 tcp_rx_segmentrate

#UDP related information on link utilization for a given (NIC) interface
int64 udp_tx_datagrams
int64 udp_rx_datagrams
float64 udp_tx_datagramrate
float64 udp_rx_datagramrate

#Total (IP: TCP + UDP) link utilization for a given (NIC) interface
int64 total_tx_packets
int64 total_tx_bytes
int64 total_rx_packets
int64 total_rx_bytes
float64 total_tx_mbps
float64 total_rx_mbps
"""
  __slots__ = ['tcp_tx_segments','tcp_rx_segments','tcp_tx_segmentrate','tcp_rx_segmentrate','udp_tx_datagrams','udp_rx_datagrams','udp_tx_datagramrate','udp_rx_datagramrate','total_tx_packets','total_tx_bytes','total_rx_packets','total_rx_bytes','total_tx_mbps','total_rx_mbps']
  _slot_types = ['int64','int64','float64','float64','int64','int64','float64','float64','int64','int64','int64','int64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       tcp_tx_segments,tcp_rx_segments,tcp_tx_segmentrate,tcp_rx_segmentrate,udp_tx_datagrams,udp_rx_datagrams,udp_tx_datagramrate,udp_rx_datagramrate,total_tx_packets,total_tx_bytes,total_rx_packets,total_rx_bytes,total_tx_mbps,total_rx_mbps

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(linkutilization, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.tcp_tx_segments is None:
        self.tcp_tx_segments = 0
      if self.tcp_rx_segments is None:
        self.tcp_rx_segments = 0
      if self.tcp_tx_segmentrate is None:
        self.tcp_tx_segmentrate = 0.
      if self.tcp_rx_segmentrate is None:
        self.tcp_rx_segmentrate = 0.
      if self.udp_tx_datagrams is None:
        self.udp_tx_datagrams = 0
      if self.udp_rx_datagrams is None:
        self.udp_rx_datagrams = 0
      if self.udp_tx_datagramrate is None:
        self.udp_tx_datagramrate = 0.
      if self.udp_rx_datagramrate is None:
        self.udp_rx_datagramrate = 0.
      if self.total_tx_packets is None:
        self.total_tx_packets = 0
      if self.total_tx_bytes is None:
        self.total_tx_bytes = 0
      if self.total_rx_packets is None:
        self.total_rx_packets = 0
      if self.total_rx_bytes is None:
        self.total_rx_bytes = 0
      if self.total_tx_mbps is None:
        self.total_tx_mbps = 0.
      if self.total_rx_mbps is None:
        self.total_rx_mbps = 0.
    else:
      self.tcp_tx_segments = 0
      self.tcp_rx_segments = 0
      self.tcp_tx_segmentrate = 0.
      self.tcp_rx_segmentrate = 0.
      self.udp_tx_datagrams = 0
      self.udp_rx_datagrams = 0
      self.udp_tx_datagramrate = 0.
      self.udp_rx_datagramrate = 0.
      self.total_tx_packets = 0
      self.total_tx_bytes = 0
      self.total_rx_packets = 0
      self.total_rx_bytes = 0
      self.total_tx_mbps = 0.
      self.total_rx_mbps = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2q2d2q2d4q2d().pack(_x.tcp_tx_segments, _x.tcp_rx_segments, _x.tcp_tx_segmentrate, _x.tcp_rx_segmentrate, _x.udp_tx_datagrams, _x.udp_rx_datagrams, _x.udp_tx_datagramrate, _x.udp_rx_datagramrate, _x.total_tx_packets, _x.total_tx_bytes, _x.total_rx_packets, _x.total_rx_bytes, _x.total_tx_mbps, _x.total_rx_mbps))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 112
      (_x.tcp_tx_segments, _x.tcp_rx_segments, _x.tcp_tx_segmentrate, _x.tcp_rx_segmentrate, _x.udp_tx_datagrams, _x.udp_rx_datagrams, _x.udp_tx_datagramrate, _x.udp_rx_datagramrate, _x.total_tx_packets, _x.total_tx_bytes, _x.total_rx_packets, _x.total_rx_bytes, _x.total_tx_mbps, _x.total_rx_mbps,) = _get_struct_2q2d2q2d4q2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2q2d2q2d4q2d().pack(_x.tcp_tx_segments, _x.tcp_rx_segments, _x.tcp_tx_segmentrate, _x.tcp_rx_segmentrate, _x.udp_tx_datagrams, _x.udp_rx_datagrams, _x.udp_tx_datagramrate, _x.udp_rx_datagramrate, _x.total_tx_packets, _x.total_tx_bytes, _x.total_rx_packets, _x.total_rx_bytes, _x.total_tx_mbps, _x.total_rx_mbps))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 112
      (_x.tcp_tx_segments, _x.tcp_rx_segments, _x.tcp_tx_segmentrate, _x.tcp_rx_segmentrate, _x.udp_tx_datagrams, _x.udp_rx_datagrams, _x.udp_tx_datagramrate, _x.udp_rx_datagramrate, _x.total_tx_packets, _x.total_tx_bytes, _x.total_rx_packets, _x.total_rx_bytes, _x.total_tx_mbps, _x.total_rx_mbps,) = _get_struct_2q2d2q2d4q2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2q2d2q2d4q2d = None
def _get_struct_2q2d2q2d4q2d():
    global _struct_2q2d2q2d4q2d
    if _struct_2q2d2q2d4q2d is None:
        _struct_2q2d2q2d4q2d = struct.Struct("<2q2d2q2d4q2d")
    return _struct_2q2d2q2d4q2d
