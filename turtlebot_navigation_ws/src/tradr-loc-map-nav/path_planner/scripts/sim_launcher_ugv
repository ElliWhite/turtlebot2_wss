#!/bin/bash

# N.B.: 
# 1) this script is designed just for testing the path planning nodes; no SLAM nodes are called; SLAM is assumed to be faked by a proper V-REP environment
# 2) you can kill all the spawned terminals together by right clicking on the X icon on the left bar and selecting "Quit"

echo "usage: ./${0##*/} <robot-id>"


export ROBOT_ID=$1
export ROBOT_NAME="ugv$ROBOT_ID"
#ROBOT_ID_1=$(($ROBOT_ID-1)) # robot id zero based

if [[ -n "$ROBOT_ID" ]]; then
    echo "STARTING PP ROBOT $ROBOT_NAME"
else
    echo "give me a name please"
    exit 1
fi


########################################################################################################

QUEUE_PATH_PLANNER=1 # 1 queue path (multi-WP) planner, 0 (single-WP) path planner

ENABLE_LASER_ASSEMBLER=1 #1 laser assembler enabled, 0 disabled

ENABLE_MULTI_ROBOT_COORDINATION="true" # true or false

USE_TWO_VOLUMETRIC_MAPPING=1 # 1 use a mapping node for each robot
                             # 0 use a mapping system with just one volumetric mapping node: it has problems with each-other robot-perceptions!

USE_LASER_PROXIMITY_CHECKER=1 # 1 use laser proximity checker 

USE_TELEOP_MUX="false" # true or false, use telop mux

########################################################################################################

if [ $QUEUE_PATH_PLANNER -eq 1 ] 
then
    echo "using queue path planner"
fi

########################################################################################################

# Here we use an independent volumetric MAPPING node

#- Mapping (Octomap) + Normal Estimation
xterm -e "echo $ROBOT_NAME laser assembler; roslaunch path_planner sim_nifti_laser_assembler_ugv2.launch robot_name:=$ROBOT_NAME world_frame:=/odom; bash" &
#xterm -e "echo $ROBOT_NAME mapping; roslaunch path_planner sim_mapping_ugv2.launch robot_name:=$ROBOT_NAME use_laser_assembler:=true; bash" &
xterm -e "echo $ROBOT_NAME mapping; roslaunch path_planner sim_volumetric_mapping_ugv2.launch robot_name:=$ROBOT_NAME use_laser_assembler:=true; bash" &
sleep 1    


#- Traversability  
xterm -e "echo $ROBOT_NAME traversability; roslaunch path_planner sim_traversability_ugv2.launch robot_name:=$ROBOT_NAME enable_multi_robot_avoidance:=$ENABLE_MULTI_ROBOT_COORDINATION; bash" &
sleep 1


########################################################################################################

#- Path Planner 

if [ $QUEUE_PATH_PLANNER -eq 1 ] 
then
	# global path planner (queue path planner) + local path planner (path planner manager)
	xterm -e "echo $ROBOT_NAME queue path planner; roslaunch path_planner sim_queue_path_planner_ugv2.launch robot_name:=$ROBOT_NAME; bash" &
	#sleep 2 
	xterm -e "echo $ROBOT_NAME path planner manager; roslaunch path_planner sim_path_planner_manager_ugv2.launch robot_name:=$ROBOT_NAME use_marker_controller:=false; bash" &
else
	#xterm -e "echo ugv1 path planner; roslaunch path_planner sim_path_planner_ugv1.launch; bash" &
	xterm -e "echo $ROBOT_NAME path planner manager; roslaunch path_planner sim_path_planner_manager_ugv2.launch robot_name:=$ROBOT_NAME; bash" &
fi 

sleep 3
########################################################################################################

#- Trajectory Control 
xterm -e "echo $ROBOT_NAME trajectory control; roslaunch trajectory_control sim_trajectory_control_ugv2.launch robot_name:=$ROBOT_NAME use_teleop_mux:=$USE_TELEOP_MUX; bash" &


########################################################################################################

if [ $USE_LASER_PROXIMITY_CHECKER -eq 1 ]
then

    #- Laser proximity checker UGV1
    xterm -e "echo $ROBOT_NAME laser proximity checker; roslaunch laser_proximity_checker sim_laser_proximity_checker_ugv2.launch robot_name:=$ROBOT_NAME world_frame:=/odom; bash" &

fi 

echo "DONE WITH ROBOT $ROBOT_NAME"

# NOTE: you can use the following command to get the xterm window live if the app terminates or crashes
# xterm -e "<you_command>; bash" &

                                                   



