#!/bin/bash

export FILE_LOG_LASER_FILTERING=log_laser_filtering.txt
export FILE_LOG_LAS_ASSEMBLER=log_laser_assembler.txt
export FILE_LOG_SCAN_TO_PC_A=log_scan_to_point_cloud.txt
export FILE_LOG_SCAN_TO_PC_B=log_scan_to_point_cloud2.txt

rosparam set use_sim_time true # necessary when using a bag file 

# convert /scan to /scan_filtered
#xterm -e "echo nifti_laser_filtering; roslaunch nifti_laser_filtering nifti_laser_filtering.launch 2>&1 | tee $FILE_LOG_LASER_FILTERING; bash" & 
#xterm -e "echo nifti_laser_filtering; roslaunch nifti_laser_filtering nifti_laser_filtering.launch; bash" & 
#sleep 2

# launch the laser assembler  
#xterm -e "echo laser_assembler; roslaunch nifti_mapping_launchers nifti_laser_assembler.launch 2>&1 | tee $FILE_LOG_LAS_ASSEMBLER; bash" &
xterm -e "echo laser_assembler; roslaunch nifti_mapping_launchers nifti_laser_assembler.launch; bash" &
sleep 2

# launch the mapper 
#xterm -e "echo mapAndNav; roslaunch nifti_mapping_launchers mapAndNav.launch 2>&1 | tee $FILE_LOG_MAP_AND_NAV; bash" &
#xterm -e "echo mapAndNav; roslaunch nifti_mapping_launchers mapAndNav.launch 2>&1 | tee $FILE_LOG_MAP_AND_NAV; bash" &
#sleep 2

# convert /scan_filtered to /scan_point_cloud_color
#xterm -e "echo nifti_scan_to_point_cloud; roslaunch point_cloud_color nifti_scan_to_point_cloud.launch 2>&1 | tee $FILE_LOG_SCAN_TO_PC_A; bash" &
xterm -e "echo nifti_scan_to_point_cloud; roslaunch point_cloud_color nifti_scan_to_point_cloud.launch; bash" &
#sleep 2

./path_planning_launcher


echo DONE


