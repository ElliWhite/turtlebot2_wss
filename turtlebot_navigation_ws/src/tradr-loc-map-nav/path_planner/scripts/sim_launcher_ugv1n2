#!/bin/bash

# N.B.: 
# 1) this script is designed just for testing the path planning nodes; no SLAM nodes are called; SLAM is assumed to be faked by a proper V-REP environment
# 2) you can kill all the spawned terminals together by right clicking on the X icon on the left bar and selecting "Quit"


ENABLE_UGV2=0 # 1 ugv2 enabled, 0 ugv2 disabled 

QUEUE_PATH_PLANNER=1 # 1 queue path (multi-WP) planner, 0 (single-WP) path planner

ENABLE_LASER_ASSEMBLER=1 #1 laser assembler enabled, 0 disabled

ENABLE_MULTI_ROBOT_COORDINATION="true" # true or false

USE_TWO_VOLUMETRIC_MAPPING=1 # 1 use two mapping nodes 
                             # 0 use a mapping system with just one volumetric mapping: it has problems with other-robot-perceptions!

USE_LASER_PROXIMITY_CHECKER=1 # 1 use laser proximity checker 

########################################################################################################

if [ $QUEUE_PATH_PLANNER -eq 1 ] 
then
    echo "using queue path planner"
fi

########################################################################################################
########################################################################################################
if [ $USE_TWO_VOLUMETRIC_MAPPING -eq 1 ] 
then 
########################################################################################################

# Here we use two volumetric MAPPING nodes

    #- Mapping UGV1 (Octomap) + Normal Estimation
    if [ $ENABLE_LASER_ASSEMBLER -eq 1 ] 
    then
        xterm -e "echo ugv1 laser assembler; roslaunch path_planner sim_nifti_laser_assembler_ugv1.launch world_frame:=/odom; bash" &
        xterm -e "echo ugv1 mapping; roslaunch path_planner sim_mapping_ugv1.launch use_laser_assembler:=true; bash" &
    else
        xterm -e "echo ugv1 mapping; roslaunch path_planner sim_mapping_ugv1.launch; bash" &
    fi
    sleep 1    

    if [ $ENABLE_UGV2 -eq 1 ] 
    then
        #- Mapping UGV2 (Octomap) + Normal Estimation
        if [ $ENABLE_LASER_ASSEMBLER -eq 1 ] 
        then
            xterm -e "echo ugv2 laser assembler; roslaunch path_planner sim_nifti_laser_assembler_ugv2.launch world_frame:=/odom; bash" &
            xterm -e "echo ugv2 mapping; roslaunch path_planner sim_mapping_ugv2.launch use_laser_assembler:=true; bash" &
        else
            xterm -e "echo ugv2 mapping; roslaunch path_planner sim_mapping_ugv2.launch; bash" &
        fi
        sleep 1  
        
    fi
    
########################################################################################################    
else
########################################################################################################

# Here we use a mapping system with just one volumetric mapping (problems with other-robot-perceptions)

#- Laser assembler UGV1
xterm -e "echo ugv1 laser assembler; roslaunch path_planner sim_nifti_laser_assembler_ugv1.launch world_frame:=/odom; bash" &

if [ $ENABLE_UGV2 -eq 1 ] 
then
    #- Laser assembler UGV2
    xterm -e "echo ugv2 laser assembler; roslaunch path_planner sim_nifti_laser_assembler_ugv2.launch world_frame:=/odom; bash" &
fi


#- Point Cloud Mux and Volumetric
xterm -e "echo pointcloud mux; roslaunch path_planner sim_mux_and_volumetric_mapping_no_slam.launch; bash" &


#- Octomap demux  
xterm -e "echo octomap demux; roslaunch octomap_demux octomap_demux.launch; bash" &


#- Compute normals UGV1 
xterm -e "echo ugv1 normals; roslaunch path_planner sim_compute_normals_volumetric_ugv1.launch; bash" &

if [ $ENABLE_UGV2 -eq 1 ] 
then
    #- Compute normals UGV2 
    xterm -e "echo ugv2 normals; roslaunch path_planner sim_compute_normals_volumetric_ugv2.launch; bash" &
fi 


########################################################################################################
fi
########################################################################################################    
########################################################################################################

#- Traversability UGV1 
xterm -e "echo ugv1 traversability; roslaunch path_planner sim_traversability_ugv1.launch enable_multi_robot_avoidance:=$ENABLE_MULTI_ROBOT_COORDINATION; bash" &
sleep 1

if [ $ENABLE_UGV2 -eq 1 ] 
then
    #- Traversability UGV2 
    xterm -e "echo ugv2 traversability; roslaunch path_planner sim_traversability_ugv2.launch enable_multi_robot_avoidance:=$ENABLE_MULTI_ROBOT_COORDINATION; bash" &
    sleep 1
fi

sleep 3
########################################################################################################

#- Path Planner UGV1 

if [ $QUEUE_PATH_PLANNER -eq 1 ] 
then
	# global path planner (queue path planner) + local path planner (path planner manager)
	xterm -e "echo ugv1 queue path planner; roslaunch path_planner sim_queue_path_planner_ugv1.launch; bash" &
	#sleep 2 
	xterm -e "echo ugv1 path planner manager; roslaunch path_planner sim_path_planner_manager_ugv1.launch use_marker_controller:=false; bash" &
else
	#xterm -e "echo ugv1 path planner; roslaunch path_planner sim_path_planner_ugv1.launch; bash" &
	xterm -e "echo ugv1 path planner manager; roslaunch path_planner sim_path_planner_manager_ugv1.launch; bash" &
fi 

#- Path Planner UGV2 

if [ $ENABLE_UGV2 -eq 1 ] 
then

    if [ $QUEUE_PATH_PLANNER -eq 1 ] 
    then
        # global path planner (queue path planner) + local path planner (path planner manager)
        xterm -e "echo ugv2 queue path planner; roslaunch path_planner sim_queue_path_planner_ugv2.launch; bash" &
        #sleep 2 
        xterm -e "echo ugv2 path planner manager; roslaunch path_planner sim_path_planner_manager_ugv2.launch use_marker_controller:=false; bash" &
    else
        #xterm -e "echo ugv1 path planner; roslaunch path_planner sim_path_planner_ugv1.launch; bash" &
        xterm -e "echo ugv2 path planner manager; roslaunch path_planner sim_path_planner_manager_ugv2.launch; bash" &
    fi 
fi

sleep 3
########################################################################################################

#- Trajectory Control UGV1 
xterm -e "echo ugv1 trajectory control; roslaunch trajectory_control sim_trajectory_control_ugv1.launch; bash" &


if [ $ENABLE_UGV2 -eq 1 ] 
then
    #- Trajectory Control UGV2 
    xterm -e "echo ugv2 trajectory control; roslaunch trajectory_control sim_trajectory_control_ugv2.launch; bash" &
fi

########################################################################################################

if [ $USE_LASER_PROXIMITY_CHECKER -eq 1 ]
then

    #- Laser proximity checker UGV1
    xterm -e "echo ugv1 laser proximity checker; roslaunch laser_proximity_checker sim_laser_proximity_checker_ugv1.launch world_frame:=/odom; bash" &

    if [ $ENABLE_UGV2 -eq 1 ] 
    then
        #- Laser proximity checker UGV2
        xterm -e "echo ugv2 laser proximity checker; roslaunch laser_proximity_checker sim_laser_proximity_checker_ugv2.launch world_frame:=/odom; bash" &
    fi

fi 

########################################################################################################
#- RVIZ
xterm -e "echo rviz; roslaunch path_planner rviz_sim_path_planning.launch; bash" &

########################################################################################################

echo DONE

# NOTE: you can use the following command to get the xterm window live if the app terminates or crashes
# xterm -e "<you_command>; bash" &

                                                   



